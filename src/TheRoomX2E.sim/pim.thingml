/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

// Import everything in core [where is core?]
// import "core/scheduler.thingml"
// import "core/timer.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"
import "timer.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg,OpenedShutMsg,OpenedShutLockedMsg, MagneticSensorGeneral {
	provided port get_sensor {
		receives temperature, temprature_sum
	}
	required port request_sensor {
		sends add_thermometer, set_polling_interval
	}
	
	provided port get_mgSensor {
		receives WindowOpened, WindowShut
	}
	
	required port request_mgSensor{
		sends add_magneticSensor
	}
	
	provided port get_doorLock {
		receives DoorOpened,DoorShut,DoorLocked
	}
	
	required port request_doorLock{
		sends add_doorLockSensor
	}
	
	required port request_actuator{
		sends add_device, SwitchOn, SwitchOff
	}
	provided port human_input {
		receives add_thermometer,add_doorLockSensor,add_magneticSensor, add_device, SwitchOn, SwitchOff, set_temperature, set_polling_interval
	}
	required port human_output {
		sends temperature, prompt
	}
	
	property tmrature:Double = 20 // the requested temperature for the room
	property thermo_id:Integer // the single thermometer identifier
	property switch_id:Integer // the single on-off switch identifier
	property doorLock_id:Integer
	property mg_sensor_id:Integer
	property thermometers:Integer[25] 
	property thermoval:Double[25]
	property thermovalforOpenedWindow:Double =0
	property last_thermo:Integer = 0 // number of thermometers in the set
	property i:Integer = 0 
	property found:Boolean 
	statechart PIM_behavior init Build {
		composite state Build init AddThermo keeps history {
			
				
			
			state AddThermo {
				transition -> AddThermo2
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt)
					thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					last_thermo = last_thermo+1
					human_output!prompt("Please add second thermometer") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddThermo // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometers")
				end
				transition -> AddThermo // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometers")
				end
				
				// temperature is handled on Build level
			}
			
			state AddThermo2 {
				transition -> AddThermo3
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt)
					thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					last_thermo = last_thermo+1
					human_output!prompt("Please add the third thermometer") 
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add second thermometer")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add second thermometer")
				end
				
				// temperature is handled on Build level
			}
								
			state AddThermo3 {
				transition -> AddDoorLock
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt)
					thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					last_thermo = last_thermo+1
					human_output!prompt("Please add one door lock sensor") 
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add third thermometer")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add third thermometer")
				end
				
				// temperature is handled on Build level
			}
			
			state AddDoorLock {
				transition -> AddMagneticSensor1
				event addl:human_input?add_doorLockSensor
				action do
					doorLock_id=addl.dlid
					request_doorLock!add_doorLockSensor(doorLock_id,addl.txt)
					human_output!prompt("Please add magnetic sensors for the windows") 
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, a door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				
				// temperature is handled on Build level
			}
			
			state AddMagneticSensor1 {
				transition -> AddMagneticSensor2
				event addmgs1:human_input?add_magneticSensor
				action do
					mg_sensor_id=addmgs1.mgid
					request_mgSensor!add_magneticSensor(mg_sensor_id,addmgs1.txt)
					human_output!prompt("Please add the second magnetic sensor") 
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Door lock sensor already added, please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add magnetic sensors for the windows")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add magnetic sensors for the windows")
				end
				
				// temperature is handled on Build level
			}
			
			state AddMagneticSensor2 {
				transition -> AddDevice
				event addmgs2:human_input?add_magneticSensor
				action do
					mg_sensor_id=addmgs2.mgid
					request_mgSensor!add_magneticSensor(mg_sensor_id,addmgs2.txt)
					human_output!prompt("Please add switch devices") 
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Door lock sensor already added, please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add second magnetic sensor")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add second magnetic sensor")
				end
				
				// temperature is handled on Build level
				// temperature is handled on Build level
			}
			
			
			
			state AddDevice {
				transition -> AddDevice2
				event adddev:human_input?add_device
				action do
					switch_id=adddev.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please second device") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddDevice
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add devices")
				end
				transition -> AddDevice
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add devices")
				end
				transition -> AddDevice
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add devices")
				end
				transition -> AddDevice // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Door lock sensor already added, add devices")
				end
				transition -> AddDevice // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Magnetic sensors already added, add devices")
				end
				transition -> AddDevice
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, add device")
				end
				transition -> AddDevice // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add devices")
				end
				// temperature and set_temperature handled on Build level
			}
			
			state AddDevice2 {
				transition -> AddDevice3
				event adddev2:human_input?add_device
				action do
					switch_id=adddev2.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please third device") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddDevice2
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add second device")
				end
				transition -> AddDevice2
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add second device")
				end
				transition -> AddDevice2
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add second device")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Door lock sensor already added, add second device")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Magnetic sensors already added, add second device")
				end
				transition -> AddDevice2
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, add second device")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add second device")
				end
				// temperature and set_temperature handled on Build level
			}
			
			state AddDevice3 {
				transition -> SetThermostat
				event adddev3:human_input?add_device
				action do
					switch_id=adddev3.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please give thermostat temperature setting") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddDevice3
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add third device")
				end
				transition -> AddDevice3
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add third device")
				end
				transition -> AddDevice3
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add third device")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Door lock sensor already added, add third device")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Magnetic sensors already added, add third device")
				end
				transition -> AddDevice3
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometers already added, third add device")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add third device")
				end
				// temperature and set_temperature handled on Build level
			}
			
			state SetThermostat {
				// Here the only message we want is the set_temperature, but this is on one level up to move to Running
				transition -> SetThermostat
				event human_input?add_thermometer
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end	
				transition -> SetThermostat // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> SetThermostat // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end		
				transition -> SetThermostat
				event human_input?add_device
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?SwitchOn
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?SwitchOff
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
			}
			
			// Normal transition to the Running state
			transition -> Running
			event set_temp:human_input?set_temperature
			action do
				tmrature = set_temp.t
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			//Escape situations
			transition -> Build
			event get_sensor?temperature 
				// just discard, the thermostat is not running, yet (161103)
			
		} // end Build
		
		composite state Running init Thermostat keeps history {
		
		
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				
				
				state TemprDecide {
					transition -> TemprDecrease
					event temp2:get_sensor?temprature_sum
					guard (temp2.t - thermovalforOpenedWindow) >=tmrature  // We choose switch OFF as much as we can here
					action do
						// switch off all devices
						if(tmrature >=10 and tmrature <=30)do
							i=0
							while (i<last_thermo) do
								request_actuator!SwitchOff(thermometers[i])
								i=i+1
							end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecide -> TemprDecrease--- \n"+"Tot_T: "+ (temp2.t - thermovalforOpenedWindow) + "\n" + "Action: Switch off all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temprature_sum
					guard (temp2.t - thermovalforOpenedWindow)<tmrature
					action do
						// switch on all devices
						if(tmrature >=10 and tmrature <=30)do
						i=0
						while (i<last_thermo) do
							request_actuator!SwitchOn(thermometers[i])
							i=i+1
						end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecide -> TemprIncrease--- \n"+"Tot_T: "+ (temp2.t - thermovalforOpenedWindow) + "\n" + "Action: Switch on all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				
					transition -> TemprIncrease 
					event temp:get_sensor?temprature_sum
					guard (temp.t - thermovalforOpenedWindow)<tmrature // it should keep increasing until well above the desired temperature
					action do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						//request_actuator!SwitchOn(temp.id)
						if(tmrature >=10 and tmrature <=30)do
						i=0
						while (i<last_thermo) do
							request_actuator!SwitchOn(thermometers[i])
							i=i+1
						end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprIncrease -> TemprIncrease--- \n"+"Tot_T: "+ temp.t + "\n" + "Action: Switch on all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temprature_sum
					guard (temp2.t - thermovalforOpenedWindow)>=tmrature 
					action do
						//request_actuator!SwitchOff(temp2.id)
						// switch off all devices
						if(tmrature >=10 and tmrature <=30)do
						i=0
						while (i<last_thermo) do
							request_actuator!SwitchOff(thermometers[i])
							i=i+1
						end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprIncrease -> TemprDecrease--- \n"+"Tot_T: "+ temp2.t + "\n" + "Action: Switch off all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				
					transition-> TemprDecrease
					event temp:get_sensor?temprature_sum
					guard (temp.t - thermovalforOpenedWindow) >= tmrature // it should keep decreasing until well below the desired temperature
					action do
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n")
						//request_actuator!SwitchOff(temp.id)
						// switch off all devices
						if(tmrature >=10 and tmrature <=30)do
						i=0
						while (i<last_thermo) do
							request_actuator!SwitchOff(thermometers[i])
							i=i+1
						end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecrease -> TemprDecrease--- \n"+"Tot_T: "+ temp.t + "\n" + "Action: Switch off all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temprature_sum
					guard (temp2.t - thermovalforOpenedWindow)<tmrature
					action do
						//request_actuator!SwitchOn(temp2.id)
						if(tmrature >=10 and tmrature <=30)do
						i=0
						while (i<last_thermo) do
							request_actuator!SwitchOn(thermometers[i])
							i=i+1
						end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecrease -> TemprIncrease--- \n"+"Tot_T: "+ temp2.t + "\n" + "Action: Switch off all \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
					
				}

				
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
					i = 0
					found = false
					print("thermovalforOpenedWindow: "+thermovalforOpenedWindow+"\n")
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							thermovalforOpenedWindow = thermovalforOpenedWindow + thermoval[i]
						end
					i=i+1
					end
						
					request_actuator!SwitchOff(mg_sensor.mgid)
					end
					else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
					end
						print("window opened received")
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
					i = 0
					found = false
					print("thermovalforOpenedWindow: "+thermovalforOpenedWindow+"\n")
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							thermovalforOpenedWindow = thermovalforOpenedWindow - thermoval[i]
						end
					i=i+1
					end
				
						request_actuator!SwitchOn(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("window shut received")
				end
				
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			} // end Thermostat
			
			
			state WindowShut{
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOff(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("window shut received")
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOn(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("window shut received")
				end
				
				transition -> Thermostat
				event temp:get_sensor?temperature
				guard temp.t<=tmrature-7 // it should keep increasing until well above the desired temperature
					action do
					if(tmrature >=10 and tmrature <=30)do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						request_actuator!SwitchOn(temp.id)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecrease -> TemprIncrease--- \n"+"T" + temp.id + ": "+ temp.t + "\n" + "Action: Switch on \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
			}
			
			state WindowOpened{
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOff(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("window shut received")
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOn(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("window shut received")
				end
				
				transition -> Thermostat
				event temp:get_sensor?temperature
				guard temp.t<=tmrature-7 // it should keep increasing until well above the desired temperature
					action do
					if(tmrature >=10 and tmrature <=30)do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						request_actuator!SwitchOn(temp.id)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("---TemprDecrease -> TemprIncrease--- \n"+"T" + temp.id + ": "+ temp.t + "\n" + "Action: Switch on \n DesiredTemp:"+tmrature + "\n last_thermo: " + last_thermo +"\n\n")
					end
			}	
			
			state On {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			}
			state Off {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end	
			}
			
			// Transitions of the composite state Running
			transition -> Running
			event pollint:human_input?set_polling_interval
			action do
				// just forward the polling interval instructions to the PSM
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			transition -> Running
			event temp:get_sensor?temperature
				// just discard - this should only happen when in On or Off states
			
			// Messages that should not occur, but may occur
			transition -> Running
			event human_input?add_thermometer
			action do
				human_output!prompt("Adding thermometers has been done and then blocked")
			end	
			transition -> Running
			event human_input?add_device
			action do
				human_output!prompt("Adding devices has been done and then blocked")
			end	
			
			transition -> Running
			event human_input?add_doorLockSensor
			action do
				human_output!prompt("Adding door lock sensor has been done and then blocked")
			end	
			transition -> Running
			event human_input?add_magneticSensor
			action do
				human_output!prompt("Adding magnetic sensors has been done and then blocked")
			end	
			
			// Messages the cannot occur - since they are always handled
			transition -> Running
			event human_input?SwitchOn
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOn at PIM.Running")
			end		
			transition -> Running
			event human_input?SwitchOff
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOff at PIM.Running")
			end		
			transition -> Running
			event human_input?set_temperature
			action do
				//human_output!prompt("INTERNAL ERROR: Impossible set_temperature at PIM.Running")
			end		
		} // end Running
	} // end PIM_behavior
} // end PIM thing


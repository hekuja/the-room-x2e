/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

// Import everything in core [where is core?]
// import "core/scheduler.thingml"
// import "core/timer.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"
import "timer.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg,OpenedShutMsg,OpenedShutLockedMsg, MagneticSensorGeneral {
	provided port get_sensor {
		receives temperature, temprature_sum
	}
	required port request_sensor {
		sends add_thermometer, set_polling_interval
	}
	
	provided port get_mgSensor {
		receives WindowOpened, WindowShut
	}
	
	required port request_mgSensor{
		sends add_magneticSensor
	}
	
	provided port get_doorLock {
		receives DoorOpened,DoorShut,DoorLocked
	}
	required port request_alarm_beep{
		sends TurnAlarmOn,TurnAlarmOff,TurnBeepOn,TurnBeepOff
	}
	required port request_doorLock{
		sends add_doorLockSensor
	}
	
	required port request_actuator{
		sends add_device, SwitchOn, SwitchOff
	}
	provided port human_input {
		receives add_thermometer,add_doorLockSensor,add_magneticSensor, add_device, SwitchOn, SwitchOff, set_temperature, set_polling_interval,TurnAlarmOff
	}
	required port human_output {
		sends temperature, prompt
	}
	
	property tmrature:Double = 20 // the requested temperature for the room
	property thermo_id:Integer // the single thermometer identifier
	property switch_id:Integer // the single on-off switch identifier
	property doorLock_id:Integer
	property mg_sensor_id:Integer
	property thermometers:Integer[2500] //for book keeping
	property thermoval:Double[2500] //for book keeping
	property total_room_temp:Double = 0
	property av_room_temp:Double =0
	property count_of_open_windows:Integer =0
	property last_thermo:Integer = 0 // number of thermometers in the set
	property i:Integer = 0 
	property found:Boolean 
	
	// for book keeping	around the magnetic sensors
	property magneticSensors:Integer[2500] 
	property magneticSensorval:Integer[2500]
	property last_mgSensor:Integer = 0 
	property windowShut:Integer =1
	property windowOpened:Integer =2
	property doorLocked:Boolean = true
	
	
	statechart PIM_behavior init SetupWindowEnvironment1 {
		on entry do
			human_output!prompt("initializing environments, please add the thermometer for window environment 1")
		end
		composite state SetupWindowEnvironment1 init AddThermo1 {
			
			state AddThermo1 {
				transition -> AddMagneticSensor1
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
				 	request_sensor!add_thermometer(thermo_id,addt.txt)
				 	thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					total_room_temp = total_room_temp +thermoval[last_thermo]
					last_thermo = last_thermo+1
					av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
					human_output!prompt("Please add magnetic sensor for window environment 1") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddThermo1 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				transition -> AddThermo1 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer for window environment 1")
				end
				
			}
			
			state AddMagneticSensor1 {
				transition -> AddDevice1
				event addmgs1:human_input?add_magneticSensor
				action do
					mg_sensor_id=addmgs1.mgid
					request_mgSensor!add_magneticSensor(mg_sensor_id,addmgs1.txt)
					println("added mg sensor")
					// book keeping
					magneticSensors[last_mgSensor]=mg_sensor_id
					magneticSensorval[last_mgSensor]=windowShut
					last_mgSensor = last_mgSensor+1
					human_output!prompt("Please add the device for window environment 1") 
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				transition -> AddMagneticSensor1 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 1")
				end
				
				// temperature is handled on Build level
			}
			
			state AddDevice1 {
						
				transition -> AddDevice1
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				transition -> AddDevice1 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add the device for window environment 1")
				end
				// temperature and set_temperature handled on Build level
			}
			
			// Normal transition to environment 2
			transition -> SetupWindowEnvironment2
			event adddev3:human_input?add_device
			action do
					switch_id=adddev3.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Now setting up environment 2. Please thermometer for environment 2")
				end
			
			
			
		} // end 
		
		composite state SetupWindowEnvironment2 init AddThermo2  {
			
			state AddThermo2 {
				transition -> AddMagneticSensor2
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
				 	request_sensor!add_thermometer(thermo_id,addt.txt)
				 	thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					total_room_temp = total_room_temp +thermoval[last_thermo]
					last_thermo = last_thermo+1
					av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
					human_output!prompt("Please add magnetic sensor for environment 2") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddThermo2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				transition -> AddThermo2 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer for environment 2")
				end
				
				// temperature is handled on Build level
			}
			
			state AddMagneticSensor2 {
				transition -> AddDevice2
				event addmgs1:human_input?add_magneticSensor
				action do
					mg_sensor_id=addmgs1.mgid
					request_mgSensor!add_magneticSensor(mg_sensor_id,addmgs1.txt)
					
					// book keeping
					magneticSensors[last_mgSensor]=mg_sensor_id
					magneticSensorval[last_mgSensor]=windowShut
					last_mgSensor = last_mgSensor+1
					human_output!prompt("Please add the device for window environment 2") 
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				transition -> AddMagneticSensor2 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add the magnetic sensor for window environment 2")
				end
				
				// temperature is handled on Build level
			}
			
			state AddDevice2 {
						
				transition -> AddDevice2
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				transition -> AddDevice2 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add the device for window environment 2")
				end
				// temperature and set_temperature handled on Build level
			}
			
			// Normal transition to environment 2
			transition -> SetupWall
			event adddev3:human_input?add_device
			action do
					switch_id=adddev3.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Now setting up wall without window . Please add thermometer for the wall with no window")
				end
			
			
		} // end Build
		
		composite state SetupWall init AddThermo3 {
			
			state AddThermo3 {
				transition -> AddDevice3
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
				 	request_sensor!add_thermometer(thermo_id,addt.txt)
				 	thermometers[last_thermo]=thermo_id
					thermoval[last_thermo] = 10
					total_room_temp = total_room_temp +thermoval[last_thermo]
					last_thermo = last_thermo+1
					av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
					human_output!prompt("Please add the device for the wall with no window") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddThermo3 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				transition -> AddThermo3 // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer for the wall with no window")
				end
				
				// temperature is handled on Build level
			}
			
			state AddDevice3 {
						
				transition -> AddDevice3
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				transition -> AddDevice3 // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add the device for the wall with no window")
				end
				// temperature and set_temperature handled on Build level
			}
			
			// Normal transition to environment 2
			transition -> SetupDoorLock
			event adddev3:human_input?add_device
			action do
					switch_id=adddev3.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Now setting up door lock. Please add the door lock")
				end
			
			
		} // end Build
		
		composite state SetupDoorLock init AddDoorLock {
			
			state AddDoorLock {
				
				transition -> AddDoorLock // Cover other messages
				event human_input?add_thermometer
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				transition -> AddDoorLock // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add one door lock sensor")
				end
				
				// temperature is handled on Build level
			}
			
			// Normal transition to environment 2
			transition -> SetThermostat
				event addl:human_input?add_doorLockSensor
				action do
					doorLock_id=addl.dlid
					request_doorLock!add_doorLockSensor(doorLock_id,addl.txt)
					human_output!prompt("Please give thermostat temperature setting")
				end
			
			
		} // end Build
		
		composite state SetThermostat init InitThermostat {
			state InitThermostat {
				// Here the only message we want is the set_temperature, but this is on one level up to move to Running
				transition -> InitThermostat
				event human_input?add_thermometer
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end	
				transition -> InitThermostat // Cover other messages
				event human_input?add_doorLockSensor
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> InitThermostat // Cover other messages
				event human_input?add_magneticSensor
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end		
				transition -> InitThermostat
				event human_input?add_device
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> InitThermostat
				event human_input?SwitchOn
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> InitThermostat
				event human_input?SwitchOff
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> InitThermostat
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
			}
			
			// Normal transition to the Running state
			transition -> Running
			event set_temp:human_input?set_temperature
			action do
				tmrature = set_temp.t
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			
		} //
		
		composite state Running init Thermostat keeps history {
		
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				
				
				state TemprDecide {
					
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard (av_room_temp >=(tmrature - 1))// temp2.t >=tmrature - 7  // We choose switch OFF as much as we can here
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp2.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp2.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							request_actuator!SwitchOff(temp2.id)
							if(magneticSensorval[i-1]==windowOpened and (temp2.t < tmrature - 7) as Boolean)do request_actuator!SwitchOn(temp2.id) end
							else do request_actuator!SwitchOff(temp2.id) end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("TemprDecide->TemprDecrease av_T:"+av_room_temp+"\n")
						print("TemprDecide->TemprDecrease T:"+temp2.t+"\n")
						end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard (av_room_temp < (tmrature - 1)) 
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp2.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp2.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							if(magneticSensorval[i-1]==windowOpened and (temp2.t > tmrature - 7) as Boolean)do request_actuator!SwitchOff(temp2.id) end
							else do request_actuator!SwitchOn(temp2.id) end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("TemprDecide->TemprIncrease av_T:"+av_room_temp+"\n")
						
						print("TemprDecide->TemprIncrease T:"+temp2.t+"\n")
						end
					
					transition -> TemprDecide
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecide->TemprDecide sum T:"+total_room_temp+"\n")
					end
					
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
					
					transition -> TemprIncrease 
					event temp:get_sensor?temperature
					guard (av_room_temp<= (tmrature + 1)) // it should keep increasing until well above the desired temperature
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							if(magneticSensorval[i-1]==windowOpened and (temp.t > tmrature - 7) as Boolean)do request_actuator!SwitchOff(temp.id) end
							else do request_actuator!SwitchOn(temp.id) end
							print("magneticSensorval["+ temp.id+"]!:"+magneticSensorval[temp.id]+"\n")
						end
							else do
								human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
							end
							print("TemprIncrease->TemprIncrease av_T:"+av_room_temp+"\n")
							print("TemprIncrease->TemprIncrease T:"+temp.t+"\n")
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard (av_room_temp > (tmrature + 1)) 
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp2.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp2.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							if(magneticSensorval[i-1]==windowOpened and (temp2.t < tmrature - 7) as Boolean)do request_actuator!SwitchOn(temp2.id) end
							else do request_actuator!SwitchOff(temp2.id) end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("TemprIncrease->TemprDecrease av_T:"+av_room_temp+"\n")
						print("TempIncrease->TemprDecrease T:"+temp2.t+"\n")
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprIncrease->TemprIncrease sum T:"+total_room_temp+"\n")
					end
					
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
					
					transition-> TemprDecrease
					event temp:get_sensor?temperature
					guard (av_room_temp >= (tmrature - 1))// it should keep decreasing until well below the desired temperature
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							if(magneticSensorval[i-1]==windowOpened and (temp.t < tmrature - 7) as Boolean)do request_actuator!SwitchOn(temp.id) end
							else do request_actuator!SwitchOff(temp.id) end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("TemprDecrease->TemprDecrease av_T:"+av_room_temp+"\n")
						print("TemprDecrease->TemprDecrease T:"+temp.t+"\n")
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard av_room_temp< (tmrature - 1)
					action do
						i = 0
						found = false
						while (i<last_thermo and (not found)) do
							if (temp2.id==thermometers[i]) do
								found=true 
								thermoval[i] = temp2.t
							end
						i=i+1
						end
						if(tmrature >=10 and tmrature <=30)do
							if(magneticSensorval[i-1]==windowOpened and (temp2.t > tmrature - 7) as Boolean)do request_actuator!SwitchOff(temp2.id) end
							else do request_actuator!SwitchOn(temp2.id) end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("TemprDecrease->TemprIncrease av_T:"+av_room_temp+"\n")
						print("TemprDecrease->TemprIncrease T:"+temp2.t+"\n")
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
				}

				
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
					i = 0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true
							count_of_open_windows = count_of_open_windows+1
							
						end
						
						if (i < last_mgSensor and found) do
							magneticSensorval[i]=windowOpened
							if(doorLocked == true)do request_alarm_beep!TurnAlarmOn(1) end
						end
						
					i=i+1
					end
						
					request_actuator!SwitchOff(mg_sensor.mgid)
					end
					else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
					end
					print("WindowOpened av_T:"+av_room_temp+"\n")	
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
					i = 0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							//thermovalforOpenedWindow = thermovalforOpenedWindow - thermoval[i]
							//total_room_temp = total_room_temp+thermoval[i]
							count_of_open_windows = count_of_open_windows-1
						end
						
						if (i < last_mgSensor and found) do
							//av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
							magneticSensorval[i]=windowShut	
						end
					i=i+1
					end
				
						request_actuator!SwitchOn(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						print("WindowShut av_T:"+av_room_temp +"\n")	
				end
				
				transition -> DoorLocked
				event door:get_doorLock?DoorLocked
				action do 
					i=0
				found = false
				while (i<last_mgSensor and (not found)) do
					if (magneticSensorval[i]==windowOpened) do
						found=true // trick to terminate while loop
						request_alarm_beep!TurnBeepOn(door.dlid)
					end
					i=i+1
					doorLocked = true
				end
				end
				
				transition -> DoorOpened
				event door:get_doorLock?DoorOpened
				action do 
					request_alarm_beep!TurnBeepOff(door.dlid)
					doorLocked = false
				end
				
				transition -> DoorShut
				event door:get_doorLock?DoorShut
				action do
					request_alarm_beep!TurnBeepOff(door.dlid)
					doorLocked = false
				end	
				
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				
				transition -> TurnAlarmOff
				event swoff:human_input?TurnAlarmOff
				action do
					request_alarm_beep!TurnAlarmOff(swoff.dlid)
				end 
				
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			} // end Thermostat
			
			state WindowShut{
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
					i=0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							count_of_open_windows = count_of_open_windows+1
						end
						
						if (i < last_mgSensor and found) do
							magneticSensorval[i]=windowOpened
							if(doorLocked == true)do request_alarm_beep!TurnAlarmOn(1) end
						end
					i=i+1
					end
				
						request_actuator!SwitchOff(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
				
					i=0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true
							count_of_open_windows = count_of_open_windows-1
						end
						
						if (i < last_mgSensor and found) do
							magneticSensorval[i]=windowShut	
						end
					i=i+1
					end
				
						request_actuator!SwitchOn(mg_sensor.mgid)
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						
				end
				
				
				transition -> Thermostat
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
				
			}
			
			state WindowOpened{
				transition -> WindowOpened
				event mg_sensor:get_mgSensor?WindowOpened
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOff(mg_sensor.mgid)
						
						i=0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							//total_room_temp = total_room_temp-thermoval[i]
							count_of_open_windows = count_of_open_windows+1 	
						end
						
						if (i < last_mgSensor and found) do
							magneticSensorval[i]=windowOpened	
							//av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
							if(doorLocked == true)do request_alarm_beep!TurnAlarmOn(1) end
						end
					i=i+1
					end
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end
				
				transition -> WindowShut
				event mg_sensor:get_mgSensor?WindowShut
				action do
				if(tmrature >=10 and tmrature <=30)do
						request_actuator!SwitchOn(mg_sensor.mgid)
						
						i=0
					found = false
					while (i<last_thermo and (not found)) do
						if (mg_sensor.mgid==thermometers[i]) do
							found=true 
							//total_room_temp = total_room_temp+thermoval[i]
							count_of_open_windows = count_of_open_windows-1 	
						end
						
						if (i < last_mgSensor and found) do
							//av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
							magneticSensorval[i]=windowShut	
						end
					i=i+1
					end
						
						end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
						
				end
				
				transition -> Thermostat
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
			}	
			
			state DoorLocked{
				transition -> DoorLocked
				event door:get_doorLock?DoorLocked
				action do 
					i=0
				found = false
				while (i<last_mgSensor and (not found)) do
					if (magneticSensorval[i]==windowOpened) do
						found=true // trick to terminate while loop
						request_alarm_beep!TurnBeepOn(door.dlid)
					end
					i=i+1
					doorLocked = true
				end
				end
				
				
				transition -> DoorOpened
				event door:get_doorLock?DoorOpened
				action do 
				request_alarm_beep!TurnBeepOff(door.dlid)
				doorLocked = false
				end
				
				transition -> DoorShut
				event door:get_doorLock?DoorShut
				action do
					request_alarm_beep!TurnBeepOff(door.dlid)
					doorLocked = false
				end	
				
				transition -> Thermostat
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
			}
			
			state DoorOpened{
				transition -> DoorLocked
				event door:get_doorLock?DoorLocked
				action do 
					i=0
				found = false
				while (i<last_mgSensor and (not found)) do
					if (magneticSensorval[i]==windowOpened) do
						found=true // trick to terminate while loop
						request_alarm_beep!TurnBeepOn(door.dlid)
					end
					i=i+1
					doorLocked = true
				end
				end
				
				
				transition -> DoorOpened
				event door:get_doorLock?DoorOpened
				action do 
				request_alarm_beep!TurnBeepOff(door.dlid)
				doorLocked = false
				end
				
				transition -> DoorShut
				event door:get_doorLock?DoorShut
				action do
					request_alarm_beep!TurnBeepOff(door.dlid)
					doorLocked = false
				end	
				
				transition -> Thermostat
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
			}
			
			state DoorShut{
				transition -> DoorLocked
				event door:get_doorLock?DoorLocked
				action do 
					i=0
				found = false
				while (i<last_mgSensor and (not found)) do
					if (magneticSensorval[i]==windowOpened) do
						found=true // trick to terminate while loop
						request_alarm_beep!TurnBeepOn(door.dlid)
					end
					doorLocked = true
					i=i+1
				end
				end
				
				
				transition -> DoorOpened
				event door:get_doorLock?DoorOpened
				action do 
				request_alarm_beep!TurnBeepOff(door.dlid)
				doorLocked = false
				end
				
				transition -> DoorShut
				event door:get_doorLock?DoorShut
				action do
					request_alarm_beep!TurnBeepOff(door.dlid)
					doorLocked = false
				end	
				
				transition -> Thermostat
					event temp2:get_sensor?temprature_sum
					action do
						i = 0
						found = false
						while (i<last_mgSensor and (not found)) do
							if (magneticSensorval[i]==windowOpened) do
								found=true
							end
						i=i+1
						end
						if(not found)do
							total_room_temp = (temp2.t) 
							av_room_temp = total_room_temp/last_thermo
						end
						else do 
							total_room_temp = (temp2.t) - thermoval[i-1] 
							av_room_temp = total_room_temp/(last_thermo-count_of_open_windows)
						end
						print("TemprDecrease->TemprDecrease sum av_T:"+av_room_temp+"\n" +"total_room_temp:"+total_room_temp+"\n")
					end
			}
			
			state On {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			}
			state Off {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOff(swoff.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
				if(tmrature >=10 and tmrature <=30)do
					request_actuator!SwitchOn(swon.did)
					end
						else do
							human_output!prompt("INTERNAL ERROR: The comfort room temp:"+ tmrature +" is out of range")
						end
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end	
			}
			
			state TurnAlarmOff{
				transition -> TurnAlarmOff
				event swoff:human_input?TurnAlarmOff
				action do
					request_alarm_beep!TurnAlarmOff(swoff.dlid)
				end 
				
				transition -> Thermostat
				event temp:get_sensor?temperature
				action do
					
				end
			}
			
			// Transitions of the composite state Running
			transition -> Running
			event pollint:human_input?set_polling_interval
			action do
				// just forward the polling interval instructions to the PSM
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			transition -> Running
			event temp:get_sensor?temperature
				// just discard - this should only happen when in On or Off states
			
			// Messages that should not occur, but may occur
			transition -> Running
			event human_input?add_thermometer
			action do
				human_output!prompt("Adding thermometers has been done and then blocked")
			end	
			transition -> Running
			event human_input?add_device
			action do
				human_output!prompt("Adding devices has been done and then blocked")
			end	
			
			transition -> Running
			event human_input?add_doorLockSensor
			action do
				human_output!prompt("Adding door lock sensor has been done and then blocked")
			end	
			transition -> Running
			event human_input?add_magneticSensor
			action do
				human_output!prompt("Adding magnetic sensors has been done and then blocked")
			end	
			
			// Messages the cannot occur - since they are always handled
			transition -> Running
			event human_input?SwitchOn
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOn at PIM.Running")
			end		
			transition -> Running
			event human_input?SwitchOff
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOff at PIM.Running")
			end		
			transition -> Running
			event human_input?set_temperature
			action do
				//human_output!prompt("INTERNAL ERROR: Impossible set_temperature at PIM.Running")
			end		
		} // end Running
	} // end PIM_behavior
} // end PIM thing

